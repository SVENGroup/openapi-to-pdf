openapi: "3.0.3"
info:
  title: "App Name"
  version: 1.0.0
  license:
    name: MIT
    url: https://github.com/SVENGroup/openapi-to-pdf?tab=MIT-1-ov-file#readme
  contact:
    url: https://svengroup.com
    email: refreshing@svengroup.com
servers:
  - url: "http://localhost:8000/api"
  - url: "https://dev.example.com/api"
  # Add all other base URLs here
security:
  - ApiKey: []
  # Modify based on authentication process implemented for API. See https://swagger.io/docs/specification/v3_0/authentication/
components:
  securitySchemes:
    ApiKey:
      type: apiKey
      name: X-Api-Key
      in: header

  schemas:
    # TYPES
    Id:
      type: integer
      description: The autogenerated resource ID.
      nullable: false
      readOnly: true
    Timestamp:
      type: string
      format: dateTime
      example: "2022-09-27T18:00:00.000Z"
      nullable: false
      readOnly: true
    Email:
      type: string
      format: email
      example: john@example.com
      maxLength: 255

    # ENUMS
    UserStatus:
      type: string
      enum:
        - invited
        - active
        - suspended

    # RESOURCE OBJECTS
    User:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - status
        - role_id
        - name
        - created_at
        - updated_at
      properties:
        id:
          $ref: "#/components/schemas/Id"
        first_name:
          type: string
          nullable: false
          readOnly: false
          maxLength: 255
          example: John
        last_name:
          type: string
          nullable: false
          readOnly: false
          maxLength: 255
          example: Doe
        email:
          allOf:
            - $ref: "#/components/schemas/Email"
          nullable: false
          readOnly: false
        status:
          allOf:
            - $ref: "#/components/schemas/UserStatus"
          nullable: false
          readOnly: true
        role_id:
          type: integer
          nullable: false
          readOnly: false
        name:
          type: string
          nullable: false
          readOnly: true
          example: John Doe
        created_at:
          $ref: "#/components/schemas/Timestamp"
        updated_at:
          $ref: "#/components/schemas/Timestamp"

    # RESPONSE BODY SCHEMAS
    GeneralResponseBody:
      type: object
      required:
        - message
        - success
      properties:
        message:
          type: string
        success:
          type: boolean

    ValidationErrorResponseBody:
      allOf:
        - $ref: "#/components/schemas/GeneralResponseBody"
        - type: object
          required:
            - errors
          properties:
            errors:
              type: object
              properties:
                "{attribute}":
                  type: array
                  items:
                    type: string

  responses:
    ValidationErrorResponse:
      description: Validation Error Response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationErrorResponseBody"
    NotFoundErrorResponse:
      description: Not Found Error Response
    RateLimitedErrorResponse:
      description: Rate Limited Error Response
      headers:
        Retry-After:
          schema:
            type: integer
            description: Number of seconds to wait before making another request.

paths:
  /users:
    post:
      tags:
        - Users
      summary: Create a User
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            example: application/json
        - in: header
          name: Accept
          schema:
            type: string
            example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful Create User Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponseBody"
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/ValidationErrorResponse"
        "429":
          $ref: "#/components/responses/RateLimitedErrorResponse"

  /users/{user_id}:
    get:
      tags:
        - Users
      summary: Get a User
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful Get User Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/GeneralResponseBody"
                  - type: object
                    required:
                      - data
                    properties:
                      data:
                        $ref: "#/components/schemas/User"

        "404":
          $ref: "#/components/responses/NotFoundErrorResponse"
        "429":
          $ref: "#/components/responses/RateLimitedErrorResponse"

tags:
  - name: Users
    description: Perform actions on User resource objects.
